{
  "version": 3,
  "sources": ["../../aes-js/index.js", "../../scrypt-js/scrypt.js", "../../bech32/index.js", "../../ethers/src.ts/ethers.ts", "../../@ethersproject/contracts/src.ts/index.ts", "../../@ethersproject/abstract-provider/src.ts/index.ts", "../../@ethersproject/abstract-provider/src.ts/_version.ts", "../../@ethersproject/abstract-signer/src.ts/index.ts", "../../@ethersproject/abstract-signer/src.ts/_version.ts", "../../@ethersproject/contracts/src.ts/_version.ts", "../../@ethersproject/wallet/src.ts/index.ts", "../../@ethersproject/basex/src.ts/index.ts", "../../@ethersproject/hdnode/src.ts/index.ts", "../../@ethersproject/pbkdf2/src.ts/browser-pbkdf2.ts", "../../@ethersproject/sha2/src.ts/browser-sha2.ts", "../../@ethersproject/sha2/src.ts/types.ts", "../../@ethersproject/sha2/src.ts/_version.ts", "../../@ethersproject/wordlists/src.ts/wordlist.ts", "../../@ethersproject/wordlists/src.ts/_version.ts", "../../@ethersproject/wordlists/src.ts/lang-en.ts", "../../@ethersproject/wordlists/src.ts/browser-wordlists.ts", "../../@ethersproject/hdnode/src.ts/_version.ts", "../../@ethersproject/random/src.ts/browser-random.ts", "../../@ethersproject/random/src.ts/_version.ts", "../../@ethersproject/random/src.ts/shuffle.ts", "../../@ethersproject/json-wallets/src.ts/crowdsale.ts", "../../@ethersproject/json-wallets/src.ts/_version.ts", "../../@ethersproject/json-wallets/src.ts/utils.ts", "../../@ethersproject/json-wallets/src.ts/inspect.ts", "../../@ethersproject/json-wallets/src.ts/keystore.ts", "../../@ethersproject/json-wallets/src.ts/index.ts", "../../@ethersproject/wallet/src.ts/_version.ts", "../../@ethersproject/providers/src.ts/index.ts", "../../@ethersproject/networks/src.ts/index.ts", "../../@ethersproject/networks/src.ts/_version.ts", "../../@ethersproject/providers/src.ts/base-provider.ts", "../../@ethersproject/web/src.ts/index.ts", "../../@ethersproject/web/src.ts/_version.ts", "../../@ethersproject/web/src.ts/browser-geturl.ts", "../../@ethersproject/providers/src.ts/_version.ts", "../../@ethersproject/providers/src.ts/formatter.ts", "../../@ethersproject/providers/src.ts/alchemy-provider.ts", "../../@ethersproject/providers/src.ts/websocket-provider.ts", "../../@ethersproject/providers/src.ts/json-rpc-provider.ts", "../../@ethersproject/providers/src.ts/browser-ws.ts", "../../@ethersproject/providers/src.ts/url-json-rpc-provider.ts", "../../@ethersproject/providers/src.ts/ankr-provider.ts", "../../@ethersproject/providers/src.ts/cloudflare-provider.ts", "../../@ethersproject/providers/src.ts/etherscan-provider.ts", "../../@ethersproject/providers/src.ts/fallback-provider.ts", "../../@ethersproject/providers/src.ts/browser-ipc-provider.ts", "../../@ethersproject/providers/src.ts/infura-provider.ts", "../../@ethersproject/providers/src.ts/json-rpc-batch-provider.ts", "../../@ethersproject/providers/src.ts/nodesmith-provider.ts", "../../@ethersproject/providers/src.ts/pocket-provider.ts", "../../@ethersproject/providers/src.ts/web3-provider.ts", "../../ethers/src.ts/utils.ts", "../../@ethersproject/solidity/src.ts/index.ts", "../../@ethersproject/solidity/src.ts/_version.ts", "../../@ethersproject/units/src.ts/index.ts", "../../@ethersproject/units/src.ts/_version.ts", "../../ethers/src.ts/_version.ts", "../../ethers/src.ts/index.ts"],
  "sourcesContent": ["\"use strict\";\n\n(function(root) {\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = value >> 8;\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (typeof exports !== 'undefined') {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(aesjs);\n\n    // Web Browsers\n    } else {\n\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n    }\n\n\n})(this);\n", "\"use strict\";\n\n(function(root) {\n    const MAX_VALUE = 0x7fffffff;\n\n    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n    // See: https://github.com/dchest/scrypt-async-js\n    function SHA256(m) {\n        const K = new Uint32Array([\n           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n       ]);\n\n        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;\n        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;\n        const w = new Uint32Array(64);\n\n        function blocks(p) {\n            let off = 0, len = p.length;\n            while (len >= 64) {\n                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;\n\n                for (i = 0; i < 16; i++) {\n                    j = off + i*4;\n                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |\n                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);\n                }\n\n                for (i = 16; i < 64; i++) {\n                    u = w[i-2];\n                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);\n\n                    u = w[i-15];\n                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);\n\n                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;\n                }\n\n                for (i = 0; i < 64; i++) {\n                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^\n                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +\n                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^\n                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n                    h = g;\n                    g = f;\n                    f = e;\n                    e = (d + t1) | 0;\n                    d = c;\n                    c = b;\n                    b = a;\n                    a = (t1 + t2) | 0;\n                }\n\n                h0 = (h0 + a) | 0;\n                h1 = (h1 + b) | 0;\n                h2 = (h2 + c) | 0;\n                h3 = (h3 + d) | 0;\n                h4 = (h4 + e) | 0;\n                h5 = (h5 + f) | 0;\n                h6 = (h6 + g) | 0;\n                h7 = (h7 + h) | 0;\n\n                off += 64;\n                len -= 64;\n            }\n        }\n\n        blocks(m);\n\n        let i, bytesLeft = m.length % 64,\n        bitLenHi = (m.length / 0x20000000) | 0,\n        bitLenLo = m.length << 3,\n        numZeros = (bytesLeft < 56) ? 56 : 120,\n        p = m.slice(m.length - bytesLeft, m.length);\n\n        p.push(0x80);\n        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }\n        p.push((bitLenHi >>> 24) & 0xff);\n        p.push((bitLenHi >>> 16) & 0xff);\n        p.push((bitLenHi >>> 8)  & 0xff);\n        p.push((bitLenHi >>> 0)  & 0xff);\n        p.push((bitLenLo >>> 24) & 0xff);\n        p.push((bitLenLo >>> 16) & 0xff);\n        p.push((bitLenLo >>> 8)  & 0xff);\n        p.push((bitLenLo >>> 0)  & 0xff);\n\n        blocks(p);\n\n        return [\n            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,\n            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,\n            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,\n            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,\n            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,\n            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,\n            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,\n            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff\n        ];\n    }\n\n    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n        // compress password if it's longer than hash block length\n        password = (password.length <= 64) ? password : SHA256(password);\n\n        const innerLen = 64 + salt.length + 4;\n        const inner = new Array(innerLen);\n        const outerKey = new Array(64);\n\n        let i;\n        let dk = [];\n\n        // inner = (password ^ ipad) || salt || counter\n        for (i = 0; i < 64; i++) { inner[i] = 0x36; }\n        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }\n        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }\n        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }\n\n        // outerKey = password ^ opad\n        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];\n\n        // increments counter inside inner\n        function incrementCounter() {\n            for (let i = innerLen - 1; i >= innerLen - 4; i--) {\n                inner[i]++;\n                if (inner[i] <= 0xff) return;\n                inner[i] = 0;\n            }\n        }\n\n        // output blocks = SHA256(outerKey || SHA256(inner)) ...\n        while (dkLen >= 32) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n            dkLen -= 32;\n        }\n        if (dkLen > 0) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n        }\n\n        return dk;\n    }\n\n    // The following is an adaptation of scryptsy\n    // See: https://www.npmjs.com/package/scryptsy\n    function blockmix_salsa8(BY, Yi, r, x, _X) {\n        let i;\n\n        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n        for (i = 0; i < 2 * r; i++) {\n            blockxor(BY, i * 16, _X, 16);\n            salsa20_8(_X, x);\n            arraycopy(_X, 0, BY, Yi + (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);\n        }\n\n        for (i = 0; i < r; i++) {\n            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n        }\n    }\n\n    function R(a, b) {\n        return (a << b) | (a >>> (32 - b));\n    }\n\n    function salsa20_8(B, x) {\n        arraycopy(B, 0, x, 0, 16);\n\n        for (let i = 8; i > 0; i -= 2) {\n            x[ 4] ^= R(x[ 0] + x[12], 7);\n            x[ 8] ^= R(x[ 4] + x[ 0], 9);\n            x[12] ^= R(x[ 8] + x[ 4], 13);\n            x[ 0] ^= R(x[12] + x[ 8], 18);\n            x[ 9] ^= R(x[ 5] + x[ 1], 7);\n            x[13] ^= R(x[ 9] + x[ 5], 9);\n            x[ 1] ^= R(x[13] + x[ 9], 13);\n            x[ 5] ^= R(x[ 1] + x[13], 18);\n            x[14] ^= R(x[10] + x[ 6], 7);\n            x[ 2] ^= R(x[14] + x[10], 9);\n            x[ 6] ^= R(x[ 2] + x[14], 13);\n            x[10] ^= R(x[ 6] + x[ 2], 18);\n            x[ 3] ^= R(x[15] + x[11], 7);\n            x[ 7] ^= R(x[ 3] + x[15], 9);\n            x[11] ^= R(x[ 7] + x[ 3], 13);\n            x[15] ^= R(x[11] + x[ 7], 18);\n            x[ 1] ^= R(x[ 0] + x[ 3], 7);\n            x[ 2] ^= R(x[ 1] + x[ 0], 9);\n            x[ 3] ^= R(x[ 2] + x[ 1], 13);\n            x[ 0] ^= R(x[ 3] + x[ 2], 18);\n            x[ 6] ^= R(x[ 5] + x[ 4], 7);\n            x[ 7] ^= R(x[ 6] + x[ 5], 9);\n            x[ 4] ^= R(x[ 7] + x[ 6], 13);\n            x[ 5] ^= R(x[ 4] + x[ 7], 18);\n            x[11] ^= R(x[10] + x[ 9], 7);\n            x[ 8] ^= R(x[11] + x[10], 9);\n            x[ 9] ^= R(x[ 8] + x[11], 13);\n            x[10] ^= R(x[ 9] + x[ 8], 18);\n            x[12] ^= R(x[15] + x[14], 7);\n            x[13] ^= R(x[12] + x[15], 9);\n            x[14] ^= R(x[13] + x[12], 13);\n            x[15] ^= R(x[14] + x[13], 18);\n        }\n\n        for (let i = 0; i < 16; ++i) {\n            B[i] += x[i];\n        }\n    }\n\n    // naive approach... going back to loop unrolling may yield additional performance\n    function blockxor(S, Si, D, len) {\n        for (let i = 0; i < len; i++) {\n            D[i] ^= S[Si + i]\n        }\n    }\n\n    function arraycopy(src, srcPos, dest, destPos, length) {\n        while (length--) {\n            dest[destPos++] = src[srcPos++];\n        }\n    }\n\n    function checkBufferish(o) {\n        if (!o || typeof(o.length) !== 'number') { return false; }\n\n        for (let i = 0; i < o.length; i++) {\n            const v = o[i];\n            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function ensureInteger(value, name) {\n        if (typeof(value) !== \"number\" || (value % 1)) { throw new Error('invalid ' + name); }\n        return value;\n    }\n\n    // N = Cpu cost, r = Memory cost, p = parallelization cost\n    // callback(error, progress, key)\n    function _scrypt(password, salt, N, r, p, dkLen, callback) {\n\n        N = ensureInteger(N, 'N');\n        r = ensureInteger(r, 'r');\n        p = ensureInteger(p, 'p');\n\n        dkLen = ensureInteger(dkLen, 'dkLen');\n\n        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }\n\n        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }\n        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }\n\n        if (!checkBufferish(password)) {\n            throw new Error('password must be an array or buffer');\n        }\n        password = Array.prototype.slice.call(password);\n\n        if (!checkBufferish(salt)) {\n            throw new Error('salt must be an array or buffer');\n        }\n        salt = Array.prototype.slice.call(salt);\n\n        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n        const B = new Uint32Array(p * 32 * r)\n        for (let i = 0; i < B.length; i++) {\n            const j = i * 4;\n            B[i] = ((b[j + 3] & 0xff) << 24) |\n                   ((b[j + 2] & 0xff) << 16) |\n                   ((b[j + 1] & 0xff) << 8) |\n                   ((b[j + 0] & 0xff) << 0);\n        }\n\n        const XY = new Uint32Array(64 * r);\n        const V = new Uint32Array(32 * r * N);\n\n        const Yi = 32 * r;\n\n        // scratch space\n        const x = new Uint32Array(16);       // salsa20_8\n        const _X = new Uint32Array(16);      // blockmix_salsa8\n\n        const totalOps = p * N * 2;\n        let currentOp = 0;\n        let lastPercent10 = null;\n\n        // Set this to true to abandon the scrypt on the next step\n        let stop = false;\n\n        // State information\n        let state = 0;\n        let i0 = 0, i1;\n        let Bi;\n\n        // How many blockmix_salsa8 can we do per step?\n        const limit = callback ? parseInt(1000 / r): 0xffffffff;\n\n        // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;\n\n        // This is really all I changed; making scryptsy a state machine so we occasionally\n        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n        const incrementalSMix = function() {\n            if (stop) {\n                return callback(new Error('cancelled'), currentOp / totalOps);\n            }\n\n            let steps;\n\n            switch (state) {\n                case 0:\n                    // for (var i = 0; i < p; i++)...\n                    Bi = i0 * 32 * r;\n\n                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1\n\n                    state = 1;                                         // Move to ROMix 2\n                    i1 = 0;\n\n                    // Fall through\n\n                case 1:\n\n                    // Run up to 1000 steps of the first inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                  // ROMix - 2\n                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3\n                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4\n                    }\n\n                    // for (var i = 0; i < N; i++)\n                    i1 += steps;\n                    currentOp += steps;\n\n                    if (callback) {\n                        // Call the callback with the progress (optionally stopping us)\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    i1 = 0;                                          // Move to ROMix 6\n                    state = 2;\n\n                    // Fall through\n\n                case 2:\n\n                    // Run up to 1000 steps of the second inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) { steps = limit; }\n                    for (let i = 0; i < steps; i++) {                // ROMix - 6\n                        const offset = (2 * r - 1) * 16;             // ROMix - 7\n                        const j = XY[offset] & (N - 1);\n                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)\n                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)\n                    }\n\n                    // for (var i = 0; i < N; i++)...\n                    i1 += steps;\n                    currentOp += steps;\n\n                    // Call the callback with the progress (optionally stopping us)\n                    if (callback) {\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) { break; }\n                            lastPercent10 = percent10;\n                        }\n                    }\n\n                    if (i1 < N) { break; }\n\n                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10\n\n                    // for (var i = 0; i < p; i++)...\n                    i0++;\n                    if (i0 < p) {\n                        state = 0;\n                        break;\n                    }\n\n                    b = [];\n                    for (let i = 0; i < B.length; i++) {\n                        b.push((B[i] >>  0) & 0xff);\n                        b.push((B[i] >>  8) & 0xff);\n                        b.push((B[i] >> 16) & 0xff);\n                        b.push((B[i] >> 24) & 0xff);\n                    }\n\n                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);\n\n                    // Send the result to the callback\n                    if (callback) { callback(null, 1.0, derivedKey); }\n\n                    // Done; don't break (which would reschedule)\n                    return derivedKey;\n            }\n\n            // Schedule the next steps\n            if (callback) { nextTick(incrementalSMix); }\n        }\n\n        // Run the smix state machine until completion\n        if (!callback) {\n            while (true) {\n                const derivedKey = incrementalSMix();\n                if (derivedKey != undefined) { return derivedKey; }\n            }\n        }\n\n        // Bootstrap the async incremental smix\n        incrementalSMix();\n    }\n\n    const lib = {\n        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {\n            return new Promise(function(resolve, reject) {\n                let lastProgress = 0;\n                if (progressCallback) { progressCallback(0); }\n                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {\n                    if (error) {\n                        reject(error);\n                    } else if (key) {\n                        if (progressCallback && lastProgress !== 1) {\n                            progressCallback(1);\n                        }\n                        resolve(new Uint8Array(key));\n                    } else if (progressCallback && progress !== lastProgress) {\n                        lastProgress = progress;\n                        return progressCallback(progress);\n                    }\n                });\n            });\n        },\n        syncScrypt: function(password, salt, N, r, p, dkLen) {\n            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n        }\n    };\n\n    // node.js\n    if (typeof(exports) !== 'undefined') {\n       module.exports = lib;\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(lib);\n\n    // Web Browsers\n    } else if (root) {\n\n        // If there was an existing library \"scrypt\", make sure it is still available\n        if (root.scrypt) {\n            root._scrypt = root.scrypt;\n        }\n\n        root.scrypt = lib;\n    }\n\n})(this);\n", "'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n", "\"use strict\";\n\nimport { BaseContract, Contract, ContractFactory } from \"@ethersproject/contracts\";\n\nimport { BigNumber, FixedNumber } from \"@ethersproject/bignumber\";\n\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { Wallet } from \"@ethersproject/wallet\";\n\nimport * as constants from \"@ethersproject/constants\";\n\nimport * as providers from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\n\nimport { Wordlist, wordlists} from \"@ethersproject/wordlists\";\n\nimport * as utils from \"./utils\";\n\nimport { ErrorCode as errors, Logger } from \"@ethersproject/logger\";\n\n////////////////////////\n// Types\n\nimport type { TypedDataDomain, TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { BigNumberish } from \"@ethersproject/bignumber\";\nimport { Bytes, BytesLike, Signature } from \"@ethersproject/bytes\";\nimport { Transaction, UnsignedTransaction } from \"@ethersproject/transactions\";\n\n\n////////////////////////\n// Compile-Time Constants\n\n// This is generated by \"npm run dist\"\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\n////////////////////////\n// Types\n\nimport {\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface\n} from \"@ethersproject/contracts\";\n\n\n////////////////////////\n// Exports\n\nexport {\n    Signer,\n\n    Wallet,\n    VoidSigner,\n\n    getDefaultProvider,\n    providers,\n\n    BaseContract,\n    Contract,\n    ContractFactory,\n\n    BigNumber,\n    FixedNumber,\n\n    constants,\n    errors,\n\n    logger,\n\n    utils,\n\n    wordlists,\n\n\n    ////////////////////////\n    // Compile-Time Constants\n\n    version,\n\n\n    ////////////////////////\n    // Types\n\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface,\n\n    TypedDataDomain,\n    TypedDataField,\n\n    BigNumberish,\n\n    Bytes,\n    BytesLike,\n\n    Signature,\n\n    Transaction,\n    UnsignedTransaction,\n\n    Wordlist\n};\n\n", "\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter | string, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n", "\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { BytesLike, isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { Deferrable, Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { AccessListish, Transaction } from \"@ethersproject/transactions\";\nimport { OnceBlockable } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\n\nexport type TransactionRequest = {\n    to?: string,\n    from?: string,\n    nonce?: BigNumberish,\n\n    gasLimit?: BigNumberish,\n    gasPrice?: BigNumberish,\n\n    data?: BytesLike,\n    value?: BigNumberish,\n    chainId?: number\n\n    type?: number;\n    accessList?: AccessListish;\n\n    maxPriorityFeePerGas?: BigNumberish;\n    maxFeePerGas?: BigNumberish;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n}\n\nexport interface TransactionResponse extends Transaction {\n    hash: string;\n\n    // Only if a transaction has been mined\n    blockNumber?: number,\n    blockHash?: string,\n    timestamp?: number,\n\n    confirmations: number,\n\n    // Not optional (as it is in Transaction)\n    from: string;\n\n    // The raw transaction\n    raw?: string,\n\n    // This function waits until the transaction has been mined\n    wait: (confirmations?: number) => Promise<TransactionReceipt>\n};\n\nexport type BlockTag = string | number;\n\nexport interface _Block {\n    hash: string;\n    parentHash: string;\n    number: number;\n\n    timestamp: number;\n    nonce: string;\n    difficulty: number;\n    _difficulty: BigNumber;\n\n    gasLimit: BigNumber;\n    gasUsed: BigNumber;\n\n    miner: string;\n    extraData: string;\n\n    baseFeePerGas?: null | BigNumber;\n}\n\nexport interface Block extends _Block {\n    transactions: Array<string>;\n}\n\nexport interface BlockWithTransactions extends _Block {\n    transactions: Array<TransactionResponse>;\n}\n\n\nexport interface Log {\n    blockNumber: number;\n    blockHash: string;\n    transactionIndex: number;\n\n    removed: boolean;\n\n    address: string;\n    data: string;\n\n    topics: Array<string>;\n\n    transactionHash: string;\n    logIndex: number;\n}\n\nexport interface TransactionReceipt {\n    to: string;\n    from: string;\n    contractAddress: string,\n    transactionIndex: number,\n    root?: string,\n    gasUsed: BigNumber,\n    logsBloom: string,\n    blockHash: string,\n    transactionHash: string,\n    logs: Array<Log>,\n    blockNumber: number,\n    confirmations: number,\n    cumulativeGasUsed: BigNumber,\n    effectiveGasPrice: BigNumber,\n    byzantium: boolean,\n    type: number;\n    status?: number\n};\n\nexport interface FeeData {\n    lastBaseFeePerGas: null | BigNumber;\n    maxFeePerGas: null | BigNumber;\n    maxPriorityFeePerGas: null | BigNumber;\n    gasPrice: null | BigNumber;\n}\n\nexport interface EventFilter {\n    address?: string;\n    topics?: Array<string | Array<string> | null>;\n}\n\nexport interface Filter extends EventFilter {\n    fromBlock?: BlockTag,\n    toBlock?: BlockTag,\n}\n\nexport interface FilterByBlockHash extends EventFilter {\n    blockHash?: string;\n}\n\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport abstract class ForkEvent extends Description {\n    readonly expiry: number;\n\n    readonly _isForkEvent?: boolean;\n\n    static isForkEvent(value: any): value is ForkEvent {\n        return !!(value && value._isForkEvent);\n    }\n}\n\nexport class BlockForkEvent extends ForkEvent {\n    readonly blockHash: string;\n\n    readonly _isBlockForkEvent?: boolean;\n\n    constructor(blockHash: string, expiry?: number) {\n        if (!isHexString(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: (expiry || 0),\n            blockHash: blockHash\n        });\n    }\n}\n\nexport class TransactionForkEvent extends ForkEvent {\n    readonly hash: string;\n\n    readonly _isTransactionOrderForkEvent?: boolean;\n\n    constructor(hash: string, expiry?: number) {\n        if (!isHexString(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: (expiry || 0),\n            hash: hash\n        });\n    }\n}\n\nexport class TransactionOrderForkEvent extends ForkEvent {\n    readonly beforeHash: string;\n    readonly afterHash: string;\n\n    constructor(beforeHash: string, afterHash: string, expiry?: number) {\n        if (!isHexString(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!isHexString(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: (expiry || 0),\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n\nexport type EventType = string | Array<string | Array<string>> | EventFilter | ForkEvent;\n\nexport type Listener = (...args: Array<any>) => void;\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class Provider implements OnceBlockable {\n\n    // Network\n    abstract getNetwork(): Promise<Network>;\n\n    // Latest State\n    abstract getBlockNumber(): Promise<number>;\n    abstract getGasPrice(): Promise<BigNumber>;\n    async getFeeData(): Promise<FeeData> {\n        const { block, gasPrice } = await resolveProperties({\n            block: this.getBlock(\"latest\"),\n            gasPrice: this.getGasPrice().catch((error) => {\n                // @TODO: Why is this now failing on Calaveras?\n                //console.log(error);\n                return null;\n            })\n        });\n\n        let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n\n        if (block && block.baseFeePerGas) {\n            // We may want to compute this more accurately in the future,\n            // using the formula \"check if the base fee is correct\".\n            // See: https://eips.ethereum.org/EIPS/eip-1559\n            lastBaseFeePerGas = block.baseFeePerGas;\n            maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n        }\n\n        return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };\n    }\n\n    // Account\n    abstract getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber>;\n    abstract getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number>;\n    abstract getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> ;\n    abstract getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;\n\n    // Execution\n    abstract sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse>;\n    abstract call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;\n    abstract estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;\n\n    // Queries\n    abstract getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block>;\n    abstract getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions>;\n    abstract getTransaction(transactionHash: string): Promise<TransactionResponse>;\n    abstract getTransactionReceipt(transactionHash: string): Promise<TransactionReceipt>;\n\n    // Bloom-filter Queries\n    abstract getLogs(filter: Filter): Promise<Array<Log>>;\n\n    // ENS\n    abstract resolveName(name: string | Promise<string>): Promise<null | string>;\n    abstract lookupAddress(address: string | Promise<string>): Promise<null | string>;\n\n    // Event Emitter (ish)\n    abstract on(eventName: EventType, listener: Listener): Provider;\n    abstract once(eventName: EventType, listener: Listener): Provider;\n    abstract emit(eventName: EventType, ...args: Array<any>): boolean\n    abstract listenerCount(eventName?: EventType): number;\n    abstract listeners(eventName?: EventType): Array<Listener>;\n    abstract off(eventName: EventType, listener?: Listener): Provider;\n    abstract removeAllListeners(eventName?: EventType): Provider;\n\n    // Alias for \"on\"\n    addListener(eventName: EventType, listener: Listener): Provider {\n        return this.on(eventName, listener);\n    }\n\n    // Alias for \"off\"\n    removeListener(eventName: EventType, listener: Listener): Provider {\n        return this.off(eventName, listener);\n    }\n\n    // @TODO: This *could* be implemented here, but would pull in events...\n    abstract waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt>;\n\n    readonly _isProvider: boolean;\n\n    constructor() {\n        logger.checkAbstract(new.target, Provider);\n        defineReadOnly(this, \"_isProvider\", true);\n    }\n\n    static isProvider(value: any): value is Provider {\n        return !!(value && value._isProvider);\n    }\n\n/*\n    static getResolver(network: Network, callable: CallTransactionable, namehash: string): string {\n        // No ENS...\n        if (!network.ensAddress) {\n            errors.throwError(\n                \"network does support ENS\",\n                errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // Not a namehash\n        if (!isHexString(namehash, 32)) {\n            errors.throwArgumentError(\"invalid name hash\", \"namehash\", namehash);\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        let data = \"0x0178b8bf\" + namehash.substring(2);\n        let transaction = { to: network.ensAddress, data: data };\n\n        return provider.call(transaction).then((data) => {\n            return provider.formatter.callAddress(data);\n        });\n    }\n\n    static resolveNamehash(network: Network, callable: CallTransactionable, namehash: string): string {\n        return this.getResolver(network, callable, namehash).then((resolverAddress) => {\n            if (!resolverAddress) { return null; }\n\n            // keccak256(\"addr(bytes32)\")\n            let data = \"0x3b3b57de\" + namehash(name).substring(2);\n            let transaction = { to: resolverAddress, data: data };\n            return callable.call(transaction).then((data) => {\n                return this.formatter.callAddress(data);\n            });\n\n        })\n    }\n*/\n}\n", "export const version = \"abstract-provider/5.7.0\";\n", "\"use strict\";\n\nimport { BlockTag, FeeData, Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { Bytes, BytesLike } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst allowedTransactionKeys: Array<string> = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\n\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n\n// EIP-712 Typed Data\n// See: https://eips.ethereum.org/EIPS/eip-712\n\nexport interface TypedDataDomain {\n    name?: string;\n    version?: string;\n    chainId?: BigNumberish;\n    verifyingContract?: string;\n    salt?: BytesLike;\n};\n\nexport interface TypedDataField {\n    name: string;\n    type: string;\n};\n\n// Sub-classes of Signer may optionally extend this interface to indicate\n// they have a private key available synchronously\nexport interface ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n}\n\n// Sub-Class Notes:\n//  - A Signer MUST always make sure, that if present, the \"from\" field\n//    matches the Signer, before sending or signing a transaction\n//  - A Signer SHOULD always wrap private information (such as a private\n//    key or mnemonic) in a function, so that console.log does not leak\n//    the data\n\n// @TODO: This is a temporary measure to preserve backwards compatibility\n//        In v6, the method on TypedDataSigner will be added to Signer\nexport interface TypedDataSigner {\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\nexport abstract class Signer {\n    readonly provider?: Provider;\n\n    ///////////////////\n    // Sub-classes MUST implement these\n\n    // Returns the checksum address\n    abstract getAddress(): Promise<string>\n\n    // Returns the signed prefixed-message. This MUST treat:\n    // - Bytes as a binary message\n    // - string as a UTF8-message\n    // i.e. \"0x1234\" is a SIX (6) byte string, NOT 2 bytes of data\n    abstract signMessage(message: Bytes | string): Promise<string>;\n\n    // Signs a transaction and returns the fully serialized, signed transaction.\n    // The EXACT transaction MUST be signed, and NO additional properties to be added.\n    // - This MAY throw if signing transactions is not supports, but if\n    //   it does, sentTransaction MUST be overridden.\n    abstract signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;\n\n    // Returns a new instance of the Signer, connected to provider.\n    // This MAY throw if changing providers is not supported.\n    abstract connect(provider: Provider): Signer;\n\n    readonly _isSigner: boolean;\n\n\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n\n\n    ///////////////////\n    // Sub-classes MAY override these\n\n    async getBalance(blockTag?: BlockTag): Promise<BigNumber> {\n        this._checkProvider(\"getBalance\");\n        return await this.provider.getBalance(this.getAddress(), blockTag);\n    }\n\n    async getTransactionCount(blockTag?: BlockTag): Promise<number> {\n        this._checkProvider(\"getTransactionCount\");\n        return await this.provider.getTransactionCount(this.getAddress(), blockTag);\n    }\n\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        this._checkProvider(\"estimateGas\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.estimateGas(tx);\n    }\n\n    // Populates \"from\" if unspecified, and calls with the transaction\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag): Promise<string> {\n        this._checkProvider(\"call\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.call(tx, blockTag);\n    }\n\n    // Populates all fields in a transaction, signs it and sends it to the network\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        this._checkProvider(\"sendTransaction\");\n        const tx = await this.populateTransaction(transaction);\n        const signedTx = await this.signTransaction(tx);\n        return await this.provider.sendTransaction(signedTx);\n    }\n\n    async getChainId(): Promise<number> {\n        this._checkProvider(\"getChainId\");\n        const network = await this.provider.getNetwork();\n        return network.chainId;\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        this._checkProvider(\"getGasPrice\");\n        return await this.provider.getGasPrice();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        this._checkProvider(\"getFeeData\");\n        return await this.provider.getFeeData();\n    }\n\n\n    async resolveName(name: string): Promise<string> {\n        this._checkProvider(\"resolveName\");\n        return await this.provider.resolveName(name);\n    }\n\n\n\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction: Deferrable<TransactionRequest>): Deferrable<TransactionRequest> {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n\n        const tx = shallowCopy(transaction);\n\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n\n        } else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n\n        return tx;\n    }\n\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    async populateTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionRequest> {\n\n        const tx: Deferrable<TransactionRequest> = await resolveProperties(this.checkTransaction(transaction))\n\n        if (tx.to != null) {\n            tx.to = Promise.resolve(tx.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n\n            // Prevent this error from causing an UnhandledPromiseException\n            tx.to.catch((error) => {  });\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n            logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n        } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n            logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n        }\n\n        if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            tx.type = 2;\n\n        } else if (tx.type === 0 || tx.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // Populate missing gasPrice\n            if (tx.gasPrice == null) { tx.gasPrice = this.getGasPrice(); }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await this.getFeeData();\n\n            if (tx.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    tx.type = 2;\n\n                    if (tx.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = tx.gasPrice;\n                        delete tx.gasPrice;\n                        tx.maxFeePerGas = gasPrice;\n                        tx.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n                        if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                        if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    if (hasEip1559) {\n                        logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"populateTransaction\"\n                        });\n                    }\n\n                    // Populate missing fee data\n                    if (tx.gasPrice == null) { tx.gasPrice = feeData.gasPrice; }\n\n                    // Explicitly set untyped transaction to legacy\n                    tx.type = 0;\n\n                } else {\n                    // getFeeData has failed us.\n                    logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n\n            } else if (tx.type === 2) {\n                // Explicitly using EIP-1559\n\n                // Populate missing fee data\n                if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n            }\n        }\n\n        if (tx.nonce == null) { tx.nonce = this.getTransactionCount(\"pending\"); }\n\n        if (tx.gasLimit == null) {\n            tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                if (forwardErrors.indexOf(error.code) >= 0) {\n                    throw error;\n                }\n\n                return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                    error: error,\n                    tx: tx\n                });\n            });\n        }\n\n        if (tx.chainId == null) {\n            tx.chainId = this.getChainId();\n        } else {\n            tx.chainId = Promise.all([\n                Promise.resolve(tx.chainId),\n                this.getChainId()\n            ]).then((results) => {\n                if (results[1] !== 0 && results[0] !== results[1]) {\n                    logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                }\n                return results[0];\n            });\n        }\n\n        return await resolveProperties(tx);\n    }\n\n\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n\n    _checkProvider(operation?: string): void {\n        if (!this.provider) { logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: (operation || \"_checkProvider\") });\n        }\n    }\n\n    static isSigner(value: any): value is Signer {\n        return !!(value && value._isSigner);\n    }\n}\n\nexport class VoidSigner extends Signer implements TypedDataSigner {\n    readonly address: string;\n\n    constructor(address: string, provider?: Provider) {\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    _fail(message: string, operation: string): Promise<any> {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n\n    signMessage(message: Bytes | string): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n\n    connect(provider: Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n}\n\n", "export const version = \"abstract-signer/5.7.0\";\n", "export const version = \"contracts/5.7.0\";\n", "\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider, TransactionRequest } from \"@ethersproject/abstract-provider\";\nimport { ExternallyOwnedAccount, Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { arrayify, Bytes, BytesLike, concat, hexDataSlice, isHexString, joinSignature, SignatureLike } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic, Mnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore, ProgressCallback } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize, UnsignedTransaction } from \"@ethersproject/transactions\";\nimport { Wordlist } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction isAccount(value: any): value is ExternallyOwnedAccount {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\n\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\n\nexport class Wallet extends Signer implements ExternallyOwnedAccount, TypedDataSigner {\n\n    readonly address: string;\n    readonly provider: Provider;\n\n    // Wrapping the _signingKey and _mnemonic in a getter function prevents\n    // leaking the private key in console.log; still, be careful! :)\n    readonly _signingKey: () => SigningKey;\n    readonly _mnemonic: () => Mnemonic;\n\n    constructor(privateKey: BytesLike | ExternallyOwnedAccount | SigningKey, provider?: Provider) {\n        super();\n\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => (\n                    {\n                        phrase: srcMnemonic.phrase,\n                        path: srcMnemonic.path || defaultPath,\n                        locale: srcMnemonic.locale || \"en\"\n                    }\n                ));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            } else {\n                defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            }\n\n\n        } else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => (<SigningKey>privateKey));\n\n            } else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof(privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n\n            defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    get mnemonic(): Mnemonic { return this._mnemonic(); }\n    get privateKey(): string { return this._signingKey().privateKey; }\n    get publicKey(): string { return this._signingKey().publicKey; }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    connect(provider: Provider): Wallet {\n        return new Wallet(this, provider);\n    }\n\n    signTransaction(transaction: TransactionRequest): Promise<string> {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n\n            const signature = this._signingKey().signDigest(keccak256(serialize(<UnsignedTransaction>tx)));\n            return serialize(<UnsignedTransaction>tx, signature);\n        });\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            if (this.provider == null) {\n                logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName\",\n                    value: name\n                });\n            }\n            return this.provider.resolveName(name);\n        });\n\n        return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    }\n\n    encrypt(password: Bytes | string, options?: any, progressCallback?: ProgressCallback): Promise<string> {\n        if (typeof(options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n\n        if (progressCallback && typeof(progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n\n        if (!options) { options = {}; }\n\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n\n\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options?: any): Wallet {\n        let entropy: Uint8Array = randomBytes(16);\n\n        if (!options) { options = { }; }\n\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([ entropy, options.extraEntropy ])), 0, 16));\n        }\n\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n\n    static fromEncryptedJson(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<Wallet> {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n\n    static fromEncryptedJsonSync(json: string, password: Bytes | string): Wallet {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n\n    static fromMnemonic(mnemonic: string, path?: string, wordlist?: Wordlist): Wallet {\n        if (!path) { path = defaultPath; }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\n\nexport function verifyMessage(message: Bytes | string, signature: SignatureLike): string {\n    return recoverAddress(hashMessage(message), signature);\n}\n\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n", "/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nexport class BaseX {\n    readonly alphabet: string;\n    readonly base: number;\n\n    _alphabetMap: { [ character: string ]: number };\n    _leader: string;\n\n    constructor(alphabet: string) {\n        defineReadOnly(this, \"alphabet\", alphabet);\n        defineReadOnly(this, \"base\", alphabet.length);\n\n        defineReadOnly(this, \"_alphabetMap\", { });\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n\n        // pre-compute lookup table\n        for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n\n    encode(value: BytesLike): string {\n        let source = arrayify(value);\n\n        if (source.length === 0) { return \"\"; }\n\n        let digits = [ 0 ]\n        for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n\n        let string = \"\"\n\n        // deal with leading zeros\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n\n        // convert digits to a string\n        for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n\n        return string;\n    }\n\n    decode(value: string): Uint8Array {\n        if (typeof(value) !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n\n        let bytes: Array<number> = [];\n        if (value.length === 0) { return new Uint8Array(bytes); }\n\n        bytes.push(0);\n        for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n\n            let carry = byte;\n            for (let j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n\n        // deal with leading zeros\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0)\n        }\n\n        return arrayify(new Uint8Array(bytes.reverse()))\n    }\n}\n\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n\nexport { Base32, Base58 };\n\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n", "\"use strict\";\n\n// See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { Wordlist, wordlists } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\n\nconst HardenedBit = 0x80000000;\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n   return ((1 << bits) - 1) << (8 - bits);\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n   return (1 << bits) - 1;\n}\n\nfunction bytes32(value: BigNumber | Uint8Array): string {\n    return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nfunction getWordlist(wordlist: string | Wordlist): Wordlist {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n\n    if (typeof(wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n\n    return wordlist;\n}\n\nconst _constructorGuard: any = {};\n\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n\nexport interface Mnemonic {\n    readonly phrase: string;\n    readonly path: string;\n    readonly locale: string;\n};\n\nexport class HDNode implements ExternallyOwnedAccount {\n    readonly privateKey: string;\n    readonly publicKey: string;\n\n    readonly fingerprint: string;\n    readonly parentFingerprint: string;\n\n    readonly address: string;\n\n    readonly mnemonic?: Mnemonic;\n    readonly path: string;\n\n    readonly chainCode: string;\n\n    readonly index: number;\n    readonly depth: number;\n\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard: any, privateKey: string, publicKey: string, parentFingerprint: string, chainCode: string, index: number, depth: number, mnemonicOrPath: Mnemonic | string) {\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        } else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n        defineReadOnly(this, \"chainCode\", chainCode);\n\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n\n        } else if (typeof(mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n\n        } else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        if (this.depth >= 256) { throw new Error(\"Depth too large!\"); }\n\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\": \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([ \"0x00\", this.privateKey ]): this.publicKey),\n        ]));\n    }\n\n    neuter(): HDNode {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n\n    private _derive(index: number): HDNode {\n        if (index > 0xffffffff) { throw new Error(\"invalid index - \" + String(index)); }\n\n        // Base path\n        let path = this.path;\n        if (path) { path += \"/\" + (index & ~HardenedBit); }\n\n        const data = new Uint8Array(37);\n\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n\n            // Hardened path\n            if (path) { path += \"'\"; }\n\n        } else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) { data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff); }\n\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n\n        // The private key\n        let ki: string = null\n\n        // The public key\n        let Ki: string = null;\n\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        } else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n\n        let mnemonicOrPath: Mnemonic | string = path;\n\n        const srcMnemonic =  this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n\n    derivePath(path: string): HDNode {\n        const components = path.split(\"/\");\n\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n\n        if (components[0] === \"m\") { components.shift(); }\n\n        let result: HDNode = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(index);\n            } else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n\n        return result;\n    }\n\n\n    static _fromSeed(seed: BytesLike, mnemonic: Mnemonic): HDNode {\n        const seedArray: Uint8Array = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) { throw new Error(\"invalid seed\"); }\n\n        const I: Uint8Array = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n\n    static fromMnemonic(mnemonic: string, password?: string, wordlist?: string | Wordlist): HDNode {\n\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n\n    static fromSeed(seed: BytesLike): HDNode {\n        return HDNode._fromSeed(seed, null);\n    }\n\n    static fromExtendedKey(extendedKey: string): HDNode {\n        const bytes = Base58.decode(extendedKey);\n\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\": case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n\n            // Private Key\n            case \"0x0488ade4\": case \"0x04358394 \":\n                if (key[0] !== 0) { break; }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\n\nexport function mnemonicToSeed(mnemonic: string, password?: string): string {\n    if (!password) { password = \"\"; }\n\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\n\nexport function mnemonicToEntropy(mnemonic: string, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    logger.checkNormalize();\n\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) { throw new Error(\"invalid mnemonic\"); }\n\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) { throw new Error(\"invalid mnemonic\"); }\n\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n\n    const entropyBits = 32 * words.length / 3;\n\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nexport function entropyToMnemonic(entropy: BytesLike, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    entropy = arrayify(entropy);\n\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n\n    const indices: Array<number> = [ 0 ];\n\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n\n            remainingBits -= 8;\n\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n            remainingBits += 3;\n        }\n    }\n\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\n    return wordlist.join(indices.map((index) => (<Wordlist>wordlist).getWord(index)));\n}\n\nexport function isValidMnemonic(mnemonic: string, wordlist?: Wordlist): boolean {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getAccountPath(index: number): string {\n    if (typeof(index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${ index }'/0/0`;\n}\n", "\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\nimport { computeHmac, SupportedAlgorithm } from \"@ethersproject/sha2\";\n\nexport function pbkdf2(password: BytesLike, salt: BytesLike, iterations: number, keylen: number, hashAlgorithm: string): string {\n    password = arrayify(password);\n    salt = arrayify(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen)\n    const block1 = new Uint8Array(salt.length + 4)\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n\n    let r: number;\n    let T: Uint8Array;\n\n    for (let i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = (i >> 24) & 0xff;\n        block1[salt.length + 1] = (i >> 16) & 0xff;\n        block1[salt.length + 2] = (i >> 8) & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n\n        //let U = createHmac(password).update(block1).digest();\n        let U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, block1));\n\n        if (!hLen) {\n            hLen = U.length\n            T = new Uint8Array(hLen)\n            l = Math.ceil(keylen / hLen)\n            r = keylen - (l - 1) * hLen\n        }\n\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n\n\n        for (let j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, U));\n            for (let k = 0; k < hLen; k++) T[k] ^= U[k]\n        }\n\n\n        const destPos = (i - 1) * hLen\n        const len = (i === l ? r : hLen)\n        //T.copy(DK, destPos, 0, len)\n        DK.set(arrayify(T).slice(0, len), destPos);\n    }\n\n    return hexlify(DK)\n}\n\n", "\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { SupportedAlgorithm } from \"./types\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport function ripemd160(data: BytesLike): string {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha256(data: BytesLike): string {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha512(data: BytesLike): string {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function computeHmac(algorithm: SupportedAlgorithm, key: BytesLike, data: BytesLike): string {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n\n    return \"0x\" + hash.hmac((<any>hash)[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n\n", "export enum SupportedAlgorithm { sha256 = \"sha256\", sha512 = \"sha512\" };\n\n", "export const version = \"sha2/5.7.0\";\n", "\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\n\nexport abstract class Wordlist {\n    readonly locale: string;\n\n    constructor(locale: string) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n\n    abstract getWord(index: number): string;\n    abstract getWordIndex(word: string): number;\n\n    // Subclasses may override this\n    split(mnemonic: string): Array<string> {\n        return mnemonic.toLowerCase().split(/ +/g)\n    }\n\n    // Subclasses may override this\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    static check(wordlist: Wordlist): string {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) { return \"0x\"; }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n\n    static register(lang: Wordlist, name?: string): void {\n        if (!name) { name = lang.locale; }\n\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = (window as any)\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                         defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            } catch (error) { }\n        }\n    }\n\n}\n\n", "export const version = \"wordlists/5.7.0\";\n", "\"use strict\";\n\nimport { Wordlist } from \"./wordlist\";\n\n\nconst words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\n\nlet wordlist: Array<string> = null;\n\n\nfunction loadWords(lang: Wordlist): void {\n    if (wordlist != null) { return; }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\n\nclass LangEn extends Wordlist {\n    constructor() {\n        super(\"en\");\n    }\n\n    getWord(index: number): string {\n        loadWords(this);\n        return wordlist[index];\n    }\n\n    getWordIndex(word: string): number {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    }\n}\n\nconst langEn = new LangEn();\nWordlist.register(langEn);\n\nexport { langEn };\n", "\"use strict\";\n\n// Wordlists\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md\n\n// Browser; only include English by default\n\nimport { Wordlist } from \"./wordlist\";\n\nimport { langEn as en } from \"./lang-en\";\n\nexport const wordlists: { [ locale: string ]: Wordlist } = {\n  en: en\n}\n", "export const version = \"hdnode/5.7.0\";\n", "\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst anyGlobal = getGlobal();\n\nlet crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n\n    logger.warn(\"WARNING: Missing strong random number source\");\n\n    crypto = {\n        getRandomValues: function(buffer: Uint8Array): Uint8Array {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n};\n", "export const version = \"random/5.7.0\";\n", "\"use strict\";\n\nexport function shuffled(array: Array<any>): Array<any> {\n    array = array.slice();\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n\n    return array;\n}\n", "\"use strict\";\n\nimport aes from \"aes-js\";\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, Bytes } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\n\nexport interface _CrowdsaleAccount {\n    address: string;\n    privateKey: string;\n\n    _isCrowdsaleAccount: boolean;\n}\n\nexport class CrowdsaleAccount extends Description<_CrowdsaleAccount> implements ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n    readonly mnemonic?: string;\n    readonly path?: string;\n\n    readonly _isCrowdsaleAccount: boolean;\n\n    isCrowdsaleAccount(value: any): value is CrowdsaleAccount {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json: string, password: Bytes | string): ExternallyOwnedAccount {\n    const data = JSON.parse(json);\n\n    password = getPassword(password);\n\n    // Ethereum Address\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n\n    // Encrypted Seed\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n\n    const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n\n    // Decrypt the seed\n    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n\n    const seedHexBytes = toUtf8Bytes(seedHex);\n\n    const privateKey = keccak256(seedHexBytes);\n\n    return new CrowdsaleAccount ({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\n\n", "export const version = \"json-wallets/5.7.0\";\n", "\"use strict\";\n\nimport { arrayify, Bytes, BytesLike, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\n\nexport function looseArrayify(hexString: string): Uint8Array {\n    if (typeof(hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\n        hexString = '0x' + hexString;\n    }\n    return arrayify(hexString);\n}\n\nexport function zpad(value: String | number, length: number): String {\n    value = String(value);\n    while (value.length < length) { value = '0' + value; }\n    return value;\n}\n\nexport function getPassword(password: Bytes | string): Uint8Array {\n    if (typeof(password) === 'string') {\n        return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n    }\n    return arrayify(password);\n}\n\nexport function searchPath(object: any, path: string): string {\n    let currentChild = object;\n\n    const comps = path.toLowerCase().split('/');\n    for (let i = 0; i < comps.length; i++) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comps[i]) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        // Didn't find one. :'(\n        if (matchingChild === null) {\n            return null;\n        }\n\n        // Now check this child...\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = arrayify(randomBytes);\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n\n", "\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\n\n\nexport function isCrowdsaleWallet(json: string): boolean {\n    let data: any = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) { return false; }\n\n    return (data.encseed && data.ethaddr);\n}\n\nexport function isKeystoreWallet(json: string): boolean {\n    let data: any = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) { return false; }\n\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\n\nexport function getJsonWalletAddress(json: string): string {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).ethaddr);\n        } catch (error) { return null; }\n    }\n\n    if (isKeystoreWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).address);\n        } catch (error) { return null; }\n    }\n\n    return null;\n}\n\n", "\"use strict\";\n\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, Bytes, BytesLike, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, Mnemonic, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\n\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Exported Types\n\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\n}\n\nexport interface _KeystoreAccount {\n    address: string;\n    privateKey: string;\n    mnemonic?: Mnemonic;\n\n    _isKeystoreAccount: boolean;\n}\n\nexport class KeystoreAccount extends Description<_KeystoreAccount> implements ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n    readonly mnemonic?: Mnemonic;\n\n    readonly _isKeystoreAccount: boolean;\n\n    isKeystoreAccount(value: any): value is KeystoreAccount {\n        return !!(value && value._isKeystoreAccount);\n    }\n}\n\nexport type ProgressCallback = (percent: number) => void;\n\nexport type EncryptOptions = {\n   iv?: BytesLike;\n   entropy?: BytesLike;\n   client?: string;\n   salt?: BytesLike;\n   uuid?: string;\n   scrypt?: {\n       N?: number;\n       r?: number;\n       p?: number;\n   }\n}\n\nfunction _decrypt(data: any, key: Uint8Array, ciphertext: Uint8Array): Uint8Array {\n    const cipher = searchPath(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"))\n        const counter = new aes.Counter(iv);\n\n        const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n\n        return arrayify(aesCtr.decrypt(ciphertext));\n    }\n\n    return null;\n}\n\nfunction _getAccount(data: any, key: Uint8Array): KeystoreAccount {\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n\n    const computedMAC = hexlify(keccak256(concat([ key.slice(16, 32), ciphertext ]))).substring(2);\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n\n    if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n\n    const mnemonicKey = key.slice(32, 64);\n\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") { check = \"0x\" + check; }\n\n        if (getAddress(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n\n    const account: _KeystoreAccount = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: hexlify(privateKey)\n    };\n\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n        const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n        const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n\n        const mnemonicCounter = new aes.Counter(mnemonicIv);\n        const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n\n        const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n        const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n\n        const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n\n        try {\n            const mnemonic = entropyToMnemonic(entropy, locale);\n            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n\n            account.mnemonic = node.mnemonic;\n\n        } catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n\n    return new KeystoreAccount(account);\n}\n\ntype ScryptFunc<T> = (pw: Uint8Array, salt: Uint8Array, n: number, r: number, p: number, dkLen: number, callback?: ProgressCallback) => T;\ntype Pbkdf2Func<T> = (pw: Uint8Array, salt: Uint8Array, c: number, dkLen: number, prfFunc: string) => T;\n\nfunction pbkdf2Sync(passwordBytes: Uint8Array, salt: Uint8Array, count: number, dkLen: number, prfFunc: string): Uint8Array {\n    return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction pbkdf2(passwordBytes: Uint8Array, salt: Uint8Array, count: number, dkLen: number, prfFunc: string): Promise<Uint8Array> {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction _computeKdfKey<T>(data: any, password: Bytes | string, pbkdf2Func: Pbkdf2Func<T>, scryptFunc: ScryptFunc<T>, progressCallback?: ProgressCallback): T {\n    const passwordBytes = getPassword(password);\n\n    const kdf = searchPath(data, \"crypto/kdf\");\n\n    if (kdf && typeof(kdf) === \"string\") {\n        const throwError = function(name: string, value: any): never {\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        }\n\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n            const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n            const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n\n            // Check for all required parameters\n            if (!N || !r || !p) { throwError(\"kdf\", kdf); }\n\n            // Make sure N is a power of 2\n            if ((N & (N - 1)) !== 0) { throwError(\"N\", N); }\n\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) { throwError(\"dklen\", dkLen); }\n\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n\n            let prfFunc: string = null;\n            const prf = searchPath(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            } else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            } else {\n                throwError(\"prf\", prf);\n            }\n\n            const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) { throwError(\"dklen\", dkLen); }\n\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\n\n\nexport function decryptSync(json: string, password: Bytes | string): KeystoreAccount {\n    const data = JSON.parse(json);\n\n    const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n    return _getAccount(data, key);\n}\n\nexport async function decrypt(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<KeystoreAccount> {\n    const data = JSON.parse(json);\n\n    const key = await _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n    return _getAccount(data, key);\n}\n\n\nexport function encrypt(account: ExternallyOwnedAccount, password: Bytes | string, options?: EncryptOptions, progressCallback?: ProgressCallback): Promise<string> {\n\n    try {\n        // Check the address matches the private key\n        if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            const mnemonic = account.mnemonic;\n            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n    // The options are optional, so adjust the call as needed\n    if (typeof(options) === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) { options = {}; }\n\n    const privateKey: Uint8Array = arrayify(account.privateKey);\n    const passwordBytes = getPassword(password);\n\n    let entropy: Uint8Array = null\n    let path: string = null;\n    let locale: string = null;\n    if (hasMnemonic(account)) {\n        const srcMnemonic = account.mnemonic;\n        entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n\n    let client = options.client;\n    if (!client) { client = \"ethers.js\"; }\n\n    // Check/generate the salt\n    let salt: Uint8Array = null;\n    if (options.salt) {\n        salt = arrayify(options.salt);\n    } else {\n        salt = randomBytes(32);;\n    }\n\n    // Override initialization vector\n    let iv: Uint8Array = null;\n    if (options.iv) {\n        iv = arrayify(options.iv);\n        if (iv.length !== 16) { throw new Error(\"invalid iv\"); }\n    } else {\n       iv = randomBytes(16);\n    }\n\n    // Override the uuid\n    let uuidRandom: Uint8Array = null;\n    if (options.uuid) {\n        uuidRandom = arrayify(options.uuid);\n        if (uuidRandom.length !== 16) { throw new Error(\"invalid uuid\"); }\n    } else {\n        uuidRandom = randomBytes(16);\n    }\n\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) { N = options.scrypt.N; }\n        if (options.scrypt.r) { r = options.scrypt.r; }\n        if (options.scrypt.p) { p = options.scrypt.p; }\n    }\n\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {\n        key = arrayify(key);\n\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        const derivedKey = key.slice(0, 16);\n        const macPrefix = key.slice(16, 32);\n\n        // This will be used to encrypt the mnemonic phrase (if any)\n        const mnemonicKey = key.slice(32, 64);\n\n        // Encrypt the private key\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n        const ciphertext = arrayify(aesCtr.encrypt(privateKey));\n\n        // Compute the message authentication code, used to check the password\n        const mac = keccak256(concat([macPrefix, ciphertext]))\n\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        const data: { [key: string]: any } = {\n            address: account.address.substring(2).toLowerCase(),\n            id: uuidV4(uuidRandom),\n            version: 3,\n            crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: hexlify(iv).substring(2),\n                },\n                ciphertext: hexlify(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: hexlify(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            const mnemonicIv = randomBytes(16);\n            const mnemonicCounter = new aes.Counter(mnemonicIv);\n            const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n            const now = new Date();\n            const timestamp = (now.getUTCFullYear() + \"-\" +\n                               zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                               zpad(now.getUTCDate(), 2) + \"T\" +\n                               zpad(now.getUTCHours(), 2) + \"-\" +\n                               zpad(now.getUTCMinutes(), 2) + \"-\" +\n                               zpad(now.getUTCSeconds(), 2) + \".0Z\"\n                              );\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n                mnemonicCounter: hexlify(mnemonicIv).substring(2),\n                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n\n        return JSON.stringify(data);\n    });\n}\n", "\"use strict\";\n\nimport { Bytes } from \"@ethersproject/bytes\";\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\n\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore, EncryptOptions, ProgressCallback } from \"./keystore\";\n\nfunction decryptJsonWallet(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<ExternallyOwnedAccount> {\n    if (isCrowdsaleWallet(json)) {\n        if (progressCallback) { progressCallback(0); }\n        const account = decryptCrowdsale(json, password)\n        if (progressCallback) { progressCallback(1); }\n        return Promise.resolve(account);\n    }\n\n    if (isKeystoreWallet(json)) {\n        return decryptKeystore(json, password, progressCallback);\n    }\n\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\n\nfunction decryptJsonWalletSync(json: string, password: Bytes | string): ExternallyOwnedAccount {\n    if (isCrowdsaleWallet(json)) {\n        return decryptCrowdsale(json, password)\n    }\n\n    if (isKeystoreWallet(json)) {\n        return decryptKeystoreSync(json, password);\n    }\n\n    throw new Error(\"invalid JSON wallet\");\n}\n\nexport {\n    decryptCrowdsale,\n\n    decryptKeystore,\n    decryptKeystoreSync,\n    encryptKeystore,\n\n    isCrowdsaleWallet,\n    isKeystoreWallet,\n    getJsonWalletAddress,\n\n    decryptJsonWallet,\n    decryptJsonWalletSync,\n\n    ProgressCallback,\n    EncryptOptions,\n};\n", "export const version = \"wallet/5.7.0\";\n", "\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\": case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\": case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    AnkrProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n", "\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n", "export const version = \"networks/5.7.1\";\n", "\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n", "\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n", "export const version = \"web/5.7.1\";\n", "\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n", "export const version = \"providers/5.7.2\";\n", "\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n", "\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\"\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n", "\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n", "\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n", "\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n", "\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n", "\nimport { Network } from \"@ethersproject/networks\";\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport type { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    readonly apiKey: string;\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n}\n", "\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n", "\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || typeof(result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string | null;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || null);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n", "\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            if (method === \"call\" && params.blockTag) {\n                return provider[method](params.transaction, params.blockTag);\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n", "\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n", "\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n", "\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n", "/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n", "\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n\n        } else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n\n        const connection: ConnectionInfo = { headers: { }, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n", "\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n", "\"use strict\";\n\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, Result, TransactionDescription }from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, dnsEncode, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\n\n////////////////////////\n// Enums\n\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\nimport { UnsignedTransaction } from \"@ethersproject/transactions\";\n\n////////////////////////\n// Types and Interfaces\n\nimport { CoerceFunc } from \"@ethersproject/abi\";\nimport { Bytes, BytesLike, Hexable } from \"@ethersproject/bytes\"\nimport { Mnemonic } from \"@ethersproject/hdnode\";\nimport { EncryptOptions, ProgressCallback } from \"@ethersproject/json-wallets\";\nimport { Deferrable } from \"@ethersproject/properties\";\nimport { Utf8ErrorFunc } from \"@ethersproject/strings\";\nimport { AccessList, AccessListish } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, FetchJsonResponse, OnceBlockable, OncePollable, PollOptions } from \"@ethersproject/web\";\n\n////////////////////////\n// Exports\n\nexport {\n    AbiCoder,\n    defaultAbiCoder,\n\n    Fragment,\n    ConstructorFragment,\n    ErrorFragment,\n    EventFragment,\n    FunctionFragment,\n    ParamType,\n    FormatTypes,\n\n    checkResultErrors,\n    Result,\n\n    Logger,\n\n    RLP,\n\n    _fetchData,\n    fetchJson,\n    poll,\n\n    checkProperties,\n    deepCopy,\n    defineReadOnly,\n    getStatic,\n    resolveProperties,\n    shallowCopy,\n\n    arrayify,\n\n    concat,\n    stripZeros,\n    zeroPad,\n\n    isBytes,\n    isBytesLike,\n\n    defaultPath,\n    HDNode,\n    SigningKey,\n\n    Interface,\n\n    LogDescription,\n    TransactionDescription,\n\n    base58,\n    base64,\n\n    hexlify,\n    isHexString,\n    hexConcat,\n    hexStripZeros,\n    hexValue,\n    hexZeroPad,\n    hexDataLength,\n    hexDataSlice,\n\n    nameprep,\n    _toEscapedUtf8String,\n    toUtf8Bytes,\n    toUtf8CodePoints,\n    toUtf8String,\n    Utf8ErrorFuncs,\n\n    formatBytes32String,\n    parseBytes32String,\n\n    dnsEncode,\n    hashMessage,\n    namehash,\n    isValidName,\n    id,\n\n    _TypedDataEncoder,\n\n    getAddress,\n    getIcapAddress,\n    getContractAddress,\n    getCreate2Address,\n    isAddress,\n\n    formatEther,\n    parseEther,\n\n    formatUnits,\n    parseUnits,\n\n    commify,\n\n    computeHmac,\n    keccak256,\n    ripemd160,\n    sha256,\n    sha512,\n\n    randomBytes,\n    shuffled,\n\n    solidityPack,\n    solidityKeccak256,\n    soliditySha256,\n\n    splitSignature,\n    joinSignature,\n\n    accessListify,\n    parseTransaction,\n    serializeTransaction,\n    TransactionTypes,\n\n    getJsonWalletAddress,\n\n    computeAddress,\n    recoverAddress,\n\n    computePublicKey,\n    recoverPublicKey,\n\n    verifyMessage,\n    verifyTypedData,\n\n    getAccountPath,\n    mnemonicToEntropy,\n    entropyToMnemonic,\n    isValidMnemonic,\n    mnemonicToSeed,\n\n\n    ////////////////////////\n    // Enums\n\n    SupportedAlgorithm,\n\n    UnicodeNormalizationForm,\n    Utf8ErrorReason,\n\n    ////////////////////////\n    // Types\n\n    Bytes,\n    BytesLike,\n    Hexable,\n\n    AccessList,\n    AccessListish,\n    UnsignedTransaction,\n\n    CoerceFunc,\n\n    Indexed,\n\n    Mnemonic,\n\n    Deferrable,\n\n    Utf8ErrorFunc,\n\n    ConnectionInfo,\n    OnceBlockable,\n    OncePollable,\n    PollOptions,\n    FetchJsonResponse,\n\n    EncryptOptions,\n    ProgressCallback\n}\n\n", "\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nfunction _pack(type: string, value: any, isArray?: boolean): Uint8Array {\n    switch(type) {\n        case \"address\":\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\": \"0x00\");\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n    }\n\n    let match =  type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\")\n\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type)\n        }\n\n        if (isArray) { size = 256; }\n\n        value = BigNumber.from(value).toTwos(size);\n\n        return zeroPad(value, size / 8);\n    }\n\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type)\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${ type }`, \"value\", value)\n        }\n        if (isArray) { return arrayify((value + Zeros).substring(0, 66)); }\n        return value;\n    }\n\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${ type }`, \"value\", value)\n        }\n        const result: Array<Uint8Array> = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n\n    return logger.throwArgumentError(\"invalid type\", \"type\", type)\n}\n\n// @TODO: Array Enum\n\nexport function pack(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values)\n    }\n    const tight: Array<Uint8Array> = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n\nexport function keccak256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashKeccak256(pack(types, values));\n}\n\nexport function sha256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashSha256(pack(types, values));\n}\n", "export const version = \"solidity/5.7.0\";\n", "\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n\n\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value: string | number): string {\n    const comps = String(value).split(\".\");\n\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") { whole = whole.substring(1); }\n    if (whole === \"\") { whole = \"0\"; }\n\n    let suffix = \"\";\n    if (comps.length === 2) { suffix = \".\" + (comps[1] || \"0\"); }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        } else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n\n    return negative + formatted.join(\",\") + suffix;\n}\n\nexport function formatUnits(value: BigNumberish, unitName?: string | BigNumberish): string {\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return formatFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function parseUnits(value: string, unitName?: BigNumberish): BigNumber {\n    if (typeof(value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return parseFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function formatEther(wei: BigNumberish): string {\n    return formatUnits(wei, 18);\n}\n\nexport function parseEther(ether: string): BigNumber {\n    return parseUnits(ether, 18);\n}\n\n", "export const version = \"units/5.7.0\";\n", "export const version = \"ethers/5.7.2\";\n", "\"use strict\";\n\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\n\nimport * as ethers from \"./ethers\";\n\ntry {\n    const anyGlobal = (window as any);\n\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers;\n    }\n} catch (error) { }\n\nexport { ethers };\n\nexport {\n    Signer,\n\n    Wallet,\n    VoidSigner,\n\n    getDefaultProvider,\n    providers,\n\n    BaseContract,\n    Contract,\n    ContractFactory,\n\n    BigNumber,\n    FixedNumber,\n\n    constants,\n    errors,\n\n    logger,\n\n    utils,\n\n    wordlists,\n\n\n    ////////////////////////\n    // Compile-Time Constants\n\n    version,\n\n\n    ////////////////////////\n    // Types\n\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface,\n\n    TypedDataDomain,\n    TypedDataField,\n\n    BigNumberish,\n\n    Bytes,\n    BytesLike,\n\n    Signature,\n\n    Transaction,\n    UnsignedTransaction,\n\n    Wordlist\n} from \"./ethers\";\n"],
  "mappings": "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Y,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,WAAY,YAAY,YAAY,WAAY,WAAY,WAAY,YAAY,WAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,WAAY,WAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,UAAY,YAAY,WAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,WAAY,YAAY,YAAY,YAAY,SAAU;AACxgxgxgxgxgxgxgxgG,UAAI,KAAK,CAAC,GAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,UAAY,WAAY,WAAY,WAAY,WAAY,YAAY,WAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YA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",
  "names": ["p", "i", "N", "encode", "words", "x", "decode", "lib_exports", "logger", "version", "init_lib", "init_lib", "init_lib", "version", "logger", "version", "logger", "__awaiter", "init_lib", "version", "logger", "version", "allowedTransactionKeys", "logger", "paramType", "__awaiter", "runningEvent", "init_lib", "init_lib", "init_lib", "init_lib", "init_lib", "init_lib", "init_lib", "SupportedAlgorithm", "version", "logger", "version", "hash", "init_lib", "init_lib", "init_lib", "version", "logger", "version", "words", "wordlist", "anyGlobal", "version", "logger", "version", "wordlist", "words", "wordlist", "logger", "words", "init_lib", "init_lib", "version", "logger", "version", "logger", "init_lib", "init_lib", "init_lib", "version", "init_lib", "randomBytes", "logger", "version", "aes", "init_lib", "import_aes_js", "init_lib", "init_lib", "init_lib", "logger", "version", "aes", "pbkdf2", "N", "scrypt", "decrypt", "now", "decrypt", "init_lib", "version", "logger", "version", "hasMnemonic", "wordlist", "init_lib", "lib_exports", "version", "logger", "version", "network", "standard", "logger", "init_lib", "init_lib", "init_lib", "init_lib", "init_lib", "version", "init_lib", "logger", "version", "timer", "stall", "body", "timeout", "version", "init_lib", "logger", "version", "hash", "value", "logger", "version", "topic", "getEventTag", "logger", "version", "words", "bech32", "hash", "now", "receipt", "__awaiter", "timer", "blockNumber", "avatar", "getEventTag", "init_lib", "init_lib", "init_lib", "logger", "version", "_constructorGuard", "__awaiter", "hash", "allowedTransactionKeys", "network", "error", "getNetwork", "result", "self", "poll", "logger", "version", "logger", "version", "id", "param", "event", "hash", "subId", "init_lib", "logger", "version", "logger", "version", "logger", "version", "defaultApiKey", "logger", "version", "init_lib", "logger", "version", "getResult", "checkError", "url", "init_lib", "logger", "version", "networks", "serialize", "stall", "timer", "now", "serialize", "logger", "networks", "i", "stall", "init_lib", "logger", "version", "init_lib", "request", "inflightRequest", "logger", "version", "defaultApiKey", "logger", "version", "init_lib", "logger", "version", "error", "logger", "version", "lib_exports", "keccak256", "sha256", "init_lib", "init_lib", "init_lib", "init_lib", "init_lib", "version", "logger", "version", "value", "keccak256", "sha256", "init_lib", "init_lib", "version", "logger", "version", "init_lib", "version", "logger", "version", "anyGlobal"]
}
